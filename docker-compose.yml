version: '3.8'

services:
  # AI-Enhanced Security Query Interface Appliance - Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=wazuh_chat
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SECRET_KEY=development_secret_key_32_characters_minimum
      # Embedded AI configuration for self-contained security appliance
      - AI_SERVICE_TYPE=embedded
      - MODELS_PATH=/app/models
      - VECTORSTORE_PATH=/app/data/vectorstore
      - MAX_CONCURRENT_MODELS=3
      - EMBEDDING_MODEL=all-MiniLM-L6-v2
      - DEFAULT_TEMPERATURE=0.7
      - DEFAULT_MAX_TOKENS=1024
      - CONVERSATION_MEMORY_SIZE=10
      # Security appliance specific settings
      - APPLIANCE_MODE=true
      - SIEM_INTEGRATION_ENABLED=true
      - MODEL_AUTO_DOWNLOAD=true
    volumes:
      - .:/app
      - /app/__pycache__
      - model_data:/app/models        # Local model storage for security appliance
      - vectorstore_data:/app/data    # Vector store and cache data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    # GPU support for LlamaCpp (uncomment if GPU available for enhanced performance)
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: all
    #           capabilities: [gpu]
    networks:
      - security-appliance-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s  # Extended for model loading

  # Security Appliance Web Interface
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
      args:
        - NEXT_PUBLIC_API_URL=http://localhost:8000
        - NEXT_PUBLIC_WS_URL=ws://localhost:8000
        - NEXT_PUBLIC_APP_NAME=AI-Enhanced Security Query Interface
        - NEXT_PUBLIC_APP_VERSION=2.0.0
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://app:8000
      - NEXT_PUBLIC_WS_URL=ws://app:8000
      - NEXT_PUBLIC_APP_NAME=AI-Enhanced Security Query Interface
      - NEXT_PUBLIC_APP_VERSION=2.0.0
      - NEXT_PUBLIC_SIEM_ENABLED=true
      - NEXT_PUBLIC_FEATURE_MODEL_MANAGEMENT=true
      - NEXT_PUBLIC_FEATURE_SIEM_DASHBOARD=true
      - NEXT_PUBLIC_FEATURE_THREAT_CORRELATION=true
      - NEXT_PUBLIC_FEATURE_ALERT_MANAGEMENT=true
      - NEXT_PUBLIC_APPLIANCE_MODE=true
      - NEXT_PUBLIC_EMBEDDED_AI=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      app:
        condition: service_healthy
    networks:
      - security-appliance-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database for security appliance
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=wazuh_chat
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql:ro
    networks:
      - security-appliance-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d wazuh_chat"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis cache for security appliance
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - security-appliance-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes

  # Nginx reverse proxy for security appliance (optional for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
      - frontend
    networks:
      - security-appliance-network
    restart: unless-stopped
    profiles:
      - production

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - security-appliance-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"  # Changed to avoid conflict with frontend
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - security-appliance-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Alertmanager for alert handling
  alertmanager:
    image: prom/alertmanager:latest
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    networks:
      - security-appliance-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Node exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($|/)'
    networks:
      - security-appliance-network
    restart: unless-stopped
    profiles:
      - monitoring

  # PostgreSQL exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:${DB_PASSWORD:-postgres}@postgres:5432/wazuh_chat?sslmode=disable
    depends_on:
      - postgres
    networks:
      - security-appliance-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Redis exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    depends_on:
      - redis
    networks:
      - security-appliance-network
    restart: unless-stopped
    profiles:
      - monitoring

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - security-appliance-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  model_data:        # Local model storage for embedded AI
  vectorstore_data:  # Vector store persistence for embedded processing
  prometheus_data:
  grafana_data:
  alertmanager_data:

networks:
  security-appliance-network:
    driver: bridge

# Complete self-contained security appliance deployment
# - No external AI service dependencies (Ollama removed)
# - Models stored locally in ./models directory
# - Embedded LlamaCpp provides all AI functionality
# - Single-command deployment with docker-compose up
# - Optional monitoring stack with --profile monitoring
# - Optional production nginx with --profile production