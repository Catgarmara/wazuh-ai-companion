#!/usr/bin/env python3
"""
Comprehensive test for Task 16: Implement missing core functionality.

This test verifies that all subtasks have been completed successfully:
- 16.1 Add vector store persistence
- 16.2 Complete log processing integration  
- 16.3 Add missing security features
"""

import tempfile
import shutil
from pathlib import Path
from unittest.mock import Mock, patch

def test_vector_store_persistence():
    """Test vector store persistence functionality (16.1)."""
    print("Testing vector store persistence (16.1)...")
    
    temp_dir = tempfile.mkdtemp()
    try:
        # Test vector store save/load functionality
        with patch('services.ai_service.HuggingFaceEmbeddings'), \
             patch('services.ai_service.ChatOllama'), \
             patch('services.ai_service.FAISS') as mock_faiss:
            
            from services.ai_service import AIService
            
            # Mock vector store
            mock_vectorstore = Mock()
            mock_vectorstore.index.ntotal = 5
            mock_faiss.from_documents.return_value = mock_vectorstore
            
            ai_service = AIService(vectorstore_path=temp_dir)
            
            # Test create and save
            mock_logs = [{"full_log": "test log", "timestamp": "2024-01-01"}]
            ai_service.create_vectorstore(mock_logs)
            success = ai_service.save_vectorstore("test")
            
            if success:
                print("‚úÖ Vector store save functionality works")
            else:
                print("‚ùå Vector store save functionality failed")
                return False
            
            # Test list saved vector stores
            vectorstores = ai_service.list_saved_vectorstores()
            if len(vectorstores) > 0:
                print("‚úÖ Vector store listing works")
            else:
                print("‚ùå Vector store listing failed")
                return False
            
            # Test vector store info
            info = ai_service.get_vectorstore_info()
            if info["status"] == "ready":
                print("‚úÖ Vector store info works")
            else:
                print("‚ùå Vector store info failed")
                return False
        
        # Test API endpoints
        try:
            from api.ai import router
            routes = [route.path for route in router.routes]
            
            expected_routes = [
                "/vectorstore/info", "/vectorstore/list", "/vectorstore/save",
                "/vectorstore/load", "/vectorstore/rebuild", "/vectorstore/update"
            ]
            
            for route in expected_routes:
                if any(route in r for r in routes):
                    print(f"‚úÖ Found API route: {route}")
                else:
                    print(f"‚ùå Missing API route: {route}")
                    return False
                    
        except Exception as e:
            print(f"‚ùå API endpoint test failed: {e}")
            return False
        
        print("üéâ Vector store persistence tests passed!")
        return True
        
    finally:
        if Path(temp_dir).exists():
            shutil.rmtree(temp_dir)


def test_log_processing_integration():
    """Test log processing integration (16.2)."""
    print("\nTesting log processing integration (16.2)...")
    
    try:
        # Test log processing status tracking
        from services.log_service import LogService, LogProcessingStatus, LogProcessingTracker
        
        tracker = LogProcessingTracker()
        
        # Test status tracking
        tracker.start_operation("test_operation", 100)
        tracker.update_status(LogProcessingStatus.PROCESSING, 50)
        tracker.complete_operation(success=True)
        
        status = tracker.get_status()
        if status["status"] == "completed" and status["logs_processed"] == 50:
            print("‚úÖ Log processing status tracking works")
        else:
            print("‚ùå Log processing status tracking failed")
            return False
        
        # Test log service integration methods
        with patch('services.log_service.get_settings'):
            log_service = LogService()
            
            if hasattr(log_service, 'load_logs_with_vectorstore_update'):
                print("‚úÖ Vector store integration method exists")
            else:
                print("‚ùå Vector store integration method missing")
                return False
            
            if hasattr(log_service, 'get_processing_status'):
                print("‚úÖ Processing status method exists")
            else:
                print("‚ùå Processing status method missing")
                return False
        
        # Test API endpoints for processing status
        try:
            from api.logs import router
            routes = [route.path for route in router.routes]
            
            if any("/processing/status" in route for route in routes):
                print("‚úÖ Processing status API endpoint exists")
            else:
                print("‚ùå Processing status API endpoint missing")
                return False
                
            if any("/processing/history" in route for route in routes):
                print("‚úÖ Processing history API endpoint exists")
            else:
                print("‚ùå Processing history API endpoint missing")
                return False
                
        except Exception as e:
            print(f"‚ùå API endpoint test failed: {e}")
            return False
        
        # Test log reload with vector store integration
        try:
            from api.logs import reload_logs
            print("‚úÖ Enhanced log reload function exists")
        except Exception as e:
            print(f"‚ùå Enhanced log reload function missing: {e}")
            return False
        
        print("üéâ Log processing integration tests passed!")
        return True
        
    except Exception as e:
        print(f"‚ùå Log processing integration test failed: {e}")
        return False


def test_security_features():
    """Test security features (16.3)."""
    print("\nTesting security features (16.3)...")
    
    try:
        # Test rate limiting middleware
        from core.middleware import RateLimitingMiddleware
        
        from fastapi import FastAPI
        app = FastAPI()
        middleware = RateLimitingMiddleware(app, requests_per_minute=60)
        
        if hasattr(middleware, '_is_rate_limited'):
            print("‚úÖ Rate limiting middleware works")
        else:
            print("‚ùå Rate limiting middleware missing functionality")
            return False
        
        # Test input sanitization
        from core.input_sanitization import InputSanitizer, InputSanitizationMiddleware
        
        sanitizer = InputSanitizer()
        
        # Test dangerous input detection
        if sanitizer.detect_sql_injection("SELECT * FROM users; DROP TABLE users;"):
            print("‚úÖ SQL injection detection works")
        else:
            print("‚ùå SQL injection detection failed")
            return False
        
        if sanitizer.detect_xss("<script>alert('xss')</script>"):
            print("‚úÖ XSS detection works")
        else:
            print("‚ùå XSS detection failed")
            return False
        
        # Test input sanitization middleware
        middleware = InputSanitizationMiddleware(app)
        if hasattr(middleware, 'sanitizer'):
            print("‚úÖ Input sanitization middleware works")
        else:
            print("‚ùå Input sanitization middleware missing functionality")
            return False
        
        # Test audit logging
        from services.audit_service import AuditService, AuditEventType, SecurityEventSeverity
        
        audit_service = AuditService()
        
        if hasattr(audit_service, 'log_audit_event'):
            print("‚úÖ Audit logging works")
        else:
            print("‚ùå Audit logging missing functionality")
            return False
        
        if hasattr(audit_service, 'log_security_event'):
            print("‚úÖ Security event tracking works")
        else:
            print("‚ùå Security event tracking missing functionality")
            return False
        
        # Test validation functions
        from core.input_sanitization import validate_email, validate_username, validate_password_strength
        
        if validate_email("test@example.com"):
            print("‚úÖ Email validation works")
        else:
            print("‚ùå Email validation failed")
            return False
        
        if validate_username("test_user"):
            print("‚úÖ Username validation works")
        else:
            print("‚ùå Username validation failed")
            return False
        
        password_result = validate_password_strength("StrongP@ssw0rd123")
        if password_result["valid"]:
            print("‚úÖ Password strength validation works")
        else:
            print("‚ùå Password strength validation failed")
            return False
        
        # Test middleware integration
        from app.main import create_app
        
        app = create_app()
        middleware_count = len(app.user_middleware)
        
        if middleware_count >= 10:  # Should have many middleware layers
            print("‚úÖ Security middleware integration works")
        else:
            print(f"‚ùå Security middleware integration incomplete: {middleware_count} layers")
            return False
        
        print("üéâ Security features tests passed!")
        return True
        
    except Exception as e:
        print(f"‚ùå Security features test failed: {e}")
        return False


def test_requirements_compliance():
    """Test compliance with task requirements."""
    print("\nTesting requirements compliance...")
    
    try:
        # Requirement 4.5: Vector store persistence
        from services.ai_service import AIService
        
        ai_service_methods = [
            'save_vectorstore', 'load_vectorstore', 'list_saved_vectorstores',
            'delete_vectorstore', 'incremental_update_vectorstore'
        ]
        
        for method in ai_service_methods:
            if hasattr(AIService, method):
                print(f"‚úÖ AI service has {method} method")
            else:
                print(f"‚ùå AI service missing {method} method")
                return False
        
        # Requirement 1.1: Log processing integration
        from services.log_service import LogService
        
        log_service_methods = [
            'get_processing_status', 'get_processing_history',
            'load_logs_with_vectorstore_update'
        ]
        
        for method in log_service_methods:
            if hasattr(LogService, method):
                print(f"‚úÖ Log service has {method} method")
            else:
                print(f"‚ùå Log service missing {method} method")
                return False
        
        # Requirements 6.1, 6.2, 6.3, 6.4: Security features
        security_components = [
            ('core.middleware', 'RateLimitingMiddleware'),
            ('core.input_sanitization', 'InputSanitizationMiddleware'),
            ('services.audit_service', 'AuditService'),
            ('core.input_sanitization', 'validate_email')
        ]
        
        for module_name, component_name in security_components:
            try:
                module = __import__(module_name, fromlist=[component_name])
                if hasattr(module, component_name):
                    print(f"‚úÖ Security component {component_name} exists")
                else:
                    print(f"‚ùå Security component {component_name} missing")
                    return False
            except ImportError:
                print(f"‚ùå Security module {module_name} missing")
                return False
        
        print("üéâ Requirements compliance tests passed!")
        return True
        
    except Exception as e:
        print(f"‚ùå Requirements compliance test failed: {e}")
        return False


if __name__ == "__main__":
    print("=" * 80)
    print("TASK 16: IMPLEMENT MISSING CORE FUNCTIONALITY - COMPREHENSIVE TEST")
    print("=" * 80)
    
    # Run all subtask tests
    subtask_16_1 = test_vector_store_persistence()
    subtask_16_2 = test_log_processing_integration()
    subtask_16_3 = test_security_features()
    requirements_ok = test_requirements_compliance()
    
    print("\n" + "=" * 80)
    print("TASK 16 TEST SUMMARY")
    print("=" * 80)
    print(f"16.1 Vector Store Persistence: {'‚úÖ PASS' if subtask_16_1 else '‚ùå FAIL'}")
    print(f"16.2 Log Processing Integration: {'‚úÖ PASS' if subtask_16_2 else '‚ùå FAIL'}")
    print(f"16.3 Security Features: {'‚úÖ PASS' if subtask_16_3 else '‚ùå FAIL'}")
    print(f"Requirements Compliance: {'‚úÖ PASS' if requirements_ok else '‚ùå FAIL'}")
    
    if all([subtask_16_1, subtask_16_2, subtask_16_3, requirements_ok]):
        print("\nüéâ TASK 16 COMPLETED SUCCESSFULLY!")
        print("All missing core functionality has been implemented:")
        print("  ‚úÖ Vector store persistence with save/load/management")
        print("  ‚úÖ Log processing integration with vector store updates")
        print("  ‚úÖ Comprehensive security features (rate limiting, input sanitization, audit logging)")
        print("  ‚úÖ All requirements (4.5, 1.1, 6.1, 6.2, 6.3, 6.4) satisfied")
        exit(0)
    else:
        print("\n‚ùå TASK 16 INCOMPLETE!")
        print("Some functionality is missing or not working correctly.")
        exit(1)